# This file contains common pin mappings for MKS Robin Nano V3
# boards. To use this config, the firmware should be compiled for the
# stm32f407. When running "make menuconfig", select the 48KiB
# bootloader, and enable "USB for communication".

# The "make flash" command does not work on the MKS Robin. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "Robin_nano_v3.bin" on an SD card and then restart the
# MKS Robin with that SD card.

# See docs/Config_Reference.md for a description of parameters.

#########################################################################
#!!!!!!!!!!!!!!!!! DELETE SAVE CONFIG AT THE VERY BOTTOM !!!!!!!!!!!!!!!#
#########################################################################

########################################
# MCU
########################################

# Configuration of the primary micro-controller.
[mcu]
# Run ls /dev/serial/by-id/* on your Raspberry Pi to get which serial to use.
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_3A0037001650314335393520-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
restart_method: command
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.


########################################
# Printer / Misc
########################################

# The printer section controls high level printer settings.
[printer]
kinematics: delta
#   The type of printer in use. This option may be one of: cartesian,
#   corexy, corexz, hybrid_corexy, hybrid_corexz, rotary_delta, delta,
#   polar, winch, or none. 
#   This parameter must be specified.
max_velocity: 7000
#   Maximum velocity (in mm/s) of the toolhead (relative to the print). 
#   This parameter must be specified.
max_accel: 7000
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the print).
#   This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
max_z_velocity: 2500
#   For delta printers this limits the maximum velocity (in mm/s) of
#   moves with z axis movement. This setting can be used to reduce the
#   maximum speed of up/down moves (which require a higher step rate
#   than other moves on a delta printer). The default is to use
#   max_velocity for max_z_velocity.
max_z_accel: 1000
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the z axis. Setting this may be useful if the printer can reach higher
#   acceleration on XY moves than Z moves (eg, when using input shaper).
#   The default is to use max_accel for max_z_accel.
minimum_z_position: -5
#   The minimum Z position that the user may command the head to move
#   to. The default is 0.
square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.
delta_radius: 150 
#   Radius (in mm) of the horizontal circle formed by the three linear
#   axis towers. This parameter may also be calculated as:
#    delta_radius = smooth_rod_offset - effector_offset - carriage_offset
#   This parameter must be provided.
print_radius: 133
#   The radius (in mm) of valid toolhead XY coordinates. One may use
#   this setting to customize the range checking of toolhead moves. If
#   a large value is specified here then it may be possible to command
#   the toolhead into a collision with a tower. The default is to use
#   delta_radius for print_radius (which would normally prevent a
#   tower collision).

########################################
# A (X-Stepper) Configuration
########################################

# The stepper_a section describes the stepper controlling the front
# left tower (at 210 degrees). This section also controls the homing
# parameters (homing_speed, homing_retract_dist) for all towers.
[stepper_a]
step_pin: PE3
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: PE2
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PE4
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
microsteps: 128
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
rotation_distance: 40
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
endstop_pin: ^PA15 # X_MAX
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
#position_endstop: 336.5
#   Distance (in mm) between the nozzle and the bed when the nozzle is
#   in the center of the build area and the endstop triggers. This
#   parameter must be provided for stepper_a; for stepper_b and
#   stepper_c this parameter defaults to the value specified for
#   stepper_a.
#position_max:
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 90
#   Maximum velocity (in mm/s) of the stepper when homing.
#   The default is 5 mm/s.
homing_retract_dist: 3.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. 
#   The default is 5 mm.
homing_retract_speed: 10 
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter.
second_homing_speed: 3.0
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#arm_length: 315
#   Length (in mm) of the diagonal rod that connects this tower to the
#   print head. This parameter must be provided for stepper_a; for
#   stepper_b and stepper_c this parameter defaults to the value
#   specified for stepper_a.
#angle: 210
#   This option specifies the angle (in degrees) that the tower is
#   at. The default is 210 for stepper_a, 330 for stepper_b, and 90
#   for stepper_c.
step_pulse_duration: 0.000000100
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.

########################################
# B (Y-Stepper)  Configuration
########################################

# The stepper_b section describes the stepper controlling the front
# right tower (at 330 degrees).
[stepper_b]
step_pin: PE0
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: PB9
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PE1
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
microsteps: 128
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
rotation_distance: 40
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
endstop_pin: ^PD2 # Y_MAX
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
#position_endstop: 336.5
#   Distance (in mm) between the nozzle and the bed when the nozzle is
#   in the center of the build area and the endstop triggers. This
#   parameter must be provided for stepper_a; for stepper_b and
#   stepper_c this parameter defaults to the value specified for
#   stepper_a.
#position_max:
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 90
#   Maximum velocity (in mm/s) of the stepper when homing.
#   The default is 5 mm/s.
homing_retract_dist: 3.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. 
#   The default is 5 mm.
homing_retract_speed: 10 
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter.
second_homing_speed: 3.0
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#arm_length: 315
#   Length (in mm) of the diagonal rod that connects this tower to the
#   print head. This parameter must be provided for stepper_a; for
#   stepper_b and stepper_c this parameter defaults to the value
#   specified for stepper_a.
#angle: 330
#   This option specifies the angle (in degrees) that the tower is
#   at. The default is 210 for stepper_a, 330 for stepper_b, and 90
#   for stepper_c.
step_pulse_duration: 0.000000100
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.

########################################
# C (Z-Stepper)  Configuration
########################################

# The stepper_c section describes the stepper controlling the rear
# tower (at 90 degrees).
[stepper_c]
step_pin: PB5
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: PB4
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PB8
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
microsteps: 128
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
rotation_distance: 40
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
endstop_pin: ^PC4 # Z_MAX
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
#position_endstop: 336.5
#   Distance (in mm) between the nozzle and the bed when the nozzle is
#   in the center of the build area and the endstop triggers. This
#   parameter must be provided for stepper_a; for stepper_b and
#   stepper_c this parameter defaults to the value specified for
#   stepper_a.
#position_max:
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
homing_speed: 90
#   Maximum velocity (in mm/s) of the stepper when homing.
#   The default is 5 mm/s.
homing_retract_dist: 3.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. 
#   The default is 5 mm.
homing_retract_speed: 10 
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter.
second_homing_speed: 3.0
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero); if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.
#arm_length: 315
#   Length (in mm) of the diagonal rod that connects this tower to the
#   print head. This parameter must be provided for stepper_a; for
#   stepper_b and stepper_c this parameter defaults to the value
#   specified for stepper_a.
#angle: 90
#   This option specifies the angle (in degrees) that the tower is
#   at. The default is 210 for stepper_a, 330 for stepper_b, and 90
#   for stepper_c.
step_pulse_duration: 0.000000100
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.

########################################
# Extruder Configuration
########################################

[extruder]
step_pin: PD6
#   Step GPIO pin (triggered high). This parameter must be provided.
dir_pin: !PD3
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
enable_pin: !PB3
#   Enable pin (default is enable high; use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
microsteps: 32
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
gear_ratio: 50:17
#   The gear ratio if the stepper motor is connected to the axis via a
#   gearbox. For example, one may specify "5:1" if a 5 to 1 gearbox is
#   in use. If the axis has multiple gearboxes one may specify a comma
#   separated list of gear ratios (for example, "57:11, 2:1"). If a
#   gear_ratio is specified then rotation_distance specifies the
#   distance the axis travels for one full rotation of the final gear.
#   The default is to not use a gear ratio.
#   Change this to what applies to custom extruder this is for bondtech / bmg clone.
rotation_distance: 7.68
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
#   E3D Hemera Default 7.82
#   E3D Hemera Other: 16.273
#   FLSUN Stock: 7.68
full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
#   Change me to 400 for 0.9 degree steppers rotation distance will automatically be 
#   calibrated this applies to stepping as well no changes required. 
nozzle_diameter: 0.400
#   Diameter of the nozzle orifice (in mm). This parameter must be provided.
filament_diameter: 1.750
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
instantaneous_corner_velocity: 2.5
#   The maximum instantaneous velocity change (in mm/s) of the
#   extruder during the junction of two moves. The default is 1mm/s.
#   The equivalent of extruder jerk. 
#   This does not speed up pressue advance like linear adance. 
max_extrude_only_distance: 800.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not have any impact on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would have.
pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
pressure_advance_smooth_time: 0.040
#   A time range (in seconds) to use when calculating the average
#   extruder velocity for pressure advance. A larger value results in
#   smoother extruder movements. This parameter may not exceed 200ms.
#   This setting only applies if pressure_advance is non-zero. The
#   default is 0.040 (40 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: PE5
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: Generic 3950
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "ATC Semitec 104NT-4-R025H42G", "Generic
#   3950","Honeywell 100K 135-104LAG-J01", "NTC 100K MGB18-104F39050L32",
#   "SliceEngineering 450", and "TDK NTCG104LH104JT1". See the
#   "Temperature sensors" section for other sensors. This parameter
#   must be provided.
sensor_pin: PC1
#   Analog input pin connected to the sensor. This parameter must be provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 4700 ohms.
#smooth_time: 1.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 1 seconds.
control: pid
#   Control algorithm (either pid or watermark). This parameter must be provided.
pid_Kp: 16.658
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
pid_Ki: 0.657
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
pid_Kd: 105.568
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 238
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an error.
#   These parameters must be provided.
#   ================     !!!!!!!!!!!!!!!!!!!!!!     ==================
#   This value is set high for the purpose of hot-tightening the hotend
#   stock hotends / PTFE tubes will degrade rappidly past 245.
#   Burning PTFE is also a neurotoxin !!! 
step_pulse_duration: 0.000000100
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.

[tmc2209 stepper_a]
uart_pin: PD5
#   The pin connected to the PDN_UART line. 
#   This parameter must be provided.
#tx_pin:
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
interpolate: true
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
run_current: 0.90 # 1.100
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5 # 0.636
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor.
#   The default is 0.110 ohms.
stealthchop_threshold: 999999 
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


[tmc2209 stepper_b]
uart_pin: PD7
#   The pin connected to the PDN_UART line. 
#   This parameter must be provided.
#tx_pin:
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
interpolate: true
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
run_current: 0.90 # 1.100
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5 # 0.636
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor.
#   The default is 0.110 ohms.
stealthchop_threshold: 999999 
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


[tmc2209 stepper_c]
uart_pin: PD4
#   The pin connected to the PDN_UART line. 
#   This parameter must be provided.
#tx_pin:
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
interpolate: true
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
run_current: 0.90 # 1.100
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5 # 0.636
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor.
#   The default is 0.110 ohms.
stealthchop_threshold: 999999 
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


[tmc2209 extruder]
uart_pin: PD9
#   The pin connected to the PDN_UART line. 
#   This parameter must be provided.
#tx_pin:
#   If using separate receive and transmit lines to communicate with
#   the driver then set uart_pin to the receive pin and tx_pin to the
#   transmit pin. The default is to use uart_pin for both reading and
#   writing.
#select_pins:
#   A comma separated list of pins to set prior to accessing the
#   tmc2208 UART. This may be useful for configuring an analog mux for
#   UART communication. The default is to not configure any pins.
interpolate: false
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). This interpolation does
#   introduce a small systemic positional deviation - see
#   TMC_Drivers.md for details. The default is True.
run_current: 0.847 # 1.100
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.5 # 0.636
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. Setting a hold_current is not
#   recommended (see TMC_Drivers.md for details). The default is to
#   not reduce the current.
sense_resistor: 0.110
#   The resistance (in ohms) of the motor sense resistor.
#   The default is 0.110 ohms.
# Optional, depends on setup and how much noise from the case is considered acceptable.
# Simply printing a stepper mount and hanging it off a cable eliminates the case noise. 
stealthchop_threshold: 999999 
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode.
#uart_address:
#   The address of the TMC2209 chip for UART messages (an integer
#   between 0 and 3). This is typically used when multiple TMC2209
#   chips are connected to the same UART pin. The default is zero.
#driver_IHOLDDELAY: 8
#driver_TPOWERDOWN: 20
#driver_TBL: 2
#driver_TOFF: 3
#driver_HEND: 0
#driver_HSTRT: 5
#driver_PWM_AUTOGRAD: True
#driver_PWM_AUTOSCALE: True
#driver_PWM_LIM: 12
#driver_PWM_REG: 8
#driver_PWM_FREQ: 1
#driver_PWM_GRAD: 14
#driver_PWM_OFS: 36
#driver_SGTHRS: 0
#   Set the given register during the configuration of the TMC2209
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
#diag_pin:
#   The micro-controller pin attached to the DIAG line of the TMC2209
#   chip. The pin is normally prefaced with "^" to enable a pullup.
#   Setting this creates a "tmc2209_stepper_x:virtual_endstop" virtual
#   pin which may be used as the stepper's endstop_pin. Doing this
#   enables "sensorless homing". (Be sure to also set driver_SGTHRS to
#   an appropriate sensitivity value.) The default is to not enable
#   sensorless homing.

########################################
# Delta Calibration / Bed Mesh
########################################

# The delta_calibrate section enables a DELTA_CALIBRATE extended
# g-code command that can calibrate the shoulder endstop positions.
[delta_calibrate]
radius: 131
#   Radius (in mm) of the area that may be probed. This is the radius
#   of nozzle coordinates to be probed; if using an automatic probe
#   with an XY offset then choose a radius small enough so that the
#   probe always fits over the bed. This parameter must be provided.
speed: 45
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 25
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.

[bed_mesh]
speed: 45
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
horizontal_move_z: 25
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
mesh_radius: 130
#   Defines the radius of the mesh to probe for round beds. Note that
#   the radius is relative to the coordinate specified by the
#   mesh_origin option. This parameter must be provided for round beds
#   and omitted for rectangular beds.
mesh_origin: 0,0
#   Defines the center X, Y coordinate of the mesh for round beds. This
#   coordinate is relative to the probe's location. It may be useful
#   to adjust the mesh_origin in an effort to maximize the size of the
#   mesh radius. Default is 0, 0. This parameter must be omitted for
#   rectangular beds.
round_probe_count: 11
#   For round beds, this integer value defines the maximum number of
#   points to probe along each axis. This value must be an odd number.
#   Default is 5.
#fade_start: 1.0
#   The gcode z position in which to start phasing out z-adjustment
#   when fade is enabled. Default is 1.0.
#fade_end: 0.0
#   The gcode z position in which phasing out completes. When set to a
#   value below fade_start, fade is disabled. It should be noted that
#   fade may add unwanted scaling along the z-axis of a print. If a
#   user wishes to enable fade, a value of 10.0 is recommended.
#   Default is 0.0, which disables fade.
#fade_target:
#   The z position in which fade should converge. When this value is
#   set to a non-zero value it must be within the range of z-values in
#   the mesh. Users that wish to converge to the z homing position
#   should set this to 0. Default is the average z value of the mesh.
#split_delta_z: .025
#   The amount of Z difference (in mm) along a move that will trigger
#   a split. Default is .025.
#move_check_distance: 5.0
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
#mesh_pps: 2, 2
#   A comma separated pair of integers X, Y defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed point.
#   The user may enter a single value which will be applied to both
#   axes. Default is 2, 2.
algorithm: bicubic
#   The interpolation algorithm to use. May be either "lagrange" or
#   "bicubic". This option will not affect 3x3 grids, which are forced
#   to use lagrange sampling. Default is lagrange.
bicubic_tension: .2
#   When using the bicubic algorithm the tension parameter above may
#   be applied to change the amount of slope interpolated. Larger
#   numbers will increase the amount of slope, which results in more
#   curvature in the mesh. Default is .2.
#relative_reference_index:
#   A point index in the mesh to reference all z values to. Enabling
#   this parameter produces a mesh relative to the probed z position
#   at the provided index.
#faulty_region_1_min:
#faulty_region_1_max:
#   Optional points that define a faulty region.  See docs/Bed_Mesh.md
#   for details on faulty regions.  Up to 99 faulty regions may be added.
#   By default no faulty regions are set.

########################################
# End Stop
########################################

# Make sure to run this first then DELTA_CALIBRATE, G29 (Home), BED_MESH_CALIBRATE
# Use command  endstop_phase_calibrate stepper=stepper_a  (do this for all 3 axis,
# change the letters abc then save config). 

# Enables the ENDSTOP_PHASE_CALIBRATE command.
[endstop_phase]

[endstop_phase stepper_a]
#endstop_accuracy:
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). The default is
#   4*rotation_distance/full_steps_per_rotation.
#trigger_phase:
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. It is composed of two numbers separated
#   by a forward slash character - the phase and the total number of
#   phases (eg, "7/64"). Only set this value if one is sure the
#   stepper motor driver is reset every time the mcu is reset. If this
#   is not set, then the stepper phase will be detected on the first
#   home and that phase will be used on all subsequent homes.
endstop_align_zero: false
#   If true then the position_endstop of the axis will effectively be
#   modified so that the zero position for the axis occurs at a full
#   step on the stepper motor. (If used on the Z axis and the print
#   layer height is a multiple of a full step distance then every
#   layer will occur on a full step.) The default is False.

[endstop_phase stepper_b]
#endstop_accuracy:
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). The default is
#   4*rotation_distance/full_steps_per_rotation.
#trigger_phase:
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. It is composed of two numbers separated
#   by a forward slash character - the phase and the total number of
#   phases (eg, "7/64"). Only set this value if one is sure the
#   stepper motor driver is reset every time the mcu is reset. If this
#   is not set, then the stepper phase will be detected on the first
#   home and that phase will be used on all subsequent homes.
endstop_align_zero: false
#   If true then the position_endstop of the axis will effectively be
#   modified so that the zero position for the axis occurs at a full
#   step on the stepper motor. (If used on the Z axis and the print
#   layer height is a multiple of a full step distance then every
#   layer will occur on a full step.) The default is False.

[endstop_phase stepper_c]
#endstop_accuracy:
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). The default is
#   4*rotation_distance/full_steps_per_rotation.
#trigger_phase:
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. It is composed of two numbers separated
#   by a forward slash character - the phase and the total number of
#   phases (eg, "7/64"). Only set this value if one is sure the
#   stepper motor driver is reset every time the mcu is reset. If this
#   is not set, then the stepper phase will be detected on the first
#   home and that phase will be used on all subsequent homes.
endstop_align_zero: false 
#   If true then the position_endstop of the axis will effectively be
#   modified so that the zero position for the axis occurs at a full
#   step on the stepper motor. (If used on the Z axis and the print
#   layer height is a multiple of a full step distance then every
#   layer will occur on a full step.) The default is False.

########################################
# Filament Sensor
########################################

[filament_switch_sensor filament_runout_sensor]
switch_pin: PA4
pause_on_runout: true
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert  
#   # note this is not linked to a macro yet coming soon in further updates detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.

########################################
# Bed Configuration
########################################

[heater_bed]
heater_pin: PA0
sensor_type: NTC 100K beta 3950
sensor_pin: PC0
smooth_time: 1.0
max_power: 0.80
# PID for 60 C
#control: pid
#pid_kp: 70.606
#pid_ki: 1.422
#pid_kd: 876.400
min_temp: 0
max_temp: 100 # 130

########################################
# Heating
#
# Heater and temperature sensor verification. 
# Heater verification is automatically enabled for each heater that 
# is configured on the printer.
########################################

[verify_heater heater_bed]
#max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 240
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
hysteresis: 2.5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
#heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


[verify_heater extruder]
max_error: 150
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 30
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.

########################################
# Tool to disable heaters when homing or probing an axis.
########################################

[homing_heaters]
#steppers:
#   A comma separated list of steppers that should cause heaters to be
#   disabled. The default is to disable heaters for any homing/probing
#   move.
#   Typical example: stepper_z
heaters: extruder
#   A comma separated list of heaters to disable during homing/probing
#   moves. The default is to disable all heaters.
#   Typical example: extruder, heater_bed


########################################
# Probe Configuration
########################################
# When this section is enabled, PROBE and QUERY_PROBE extended g-code
# commands become available.

[probe]
pin: ^!PC8 # Z_MIN
#   Probe detection pin. If the pin is on a different microcontroller
#   than the Z steppers then it enables "multi-mcu homing". This
#   parameter must be provided.
x_offset: 0.599810
#   The distance (in mm) between the probe and the nozzle along the
#   x-axis. The default is 0.
y_offset: -1.500168
#   The distance (in mm) between the probe and the nozzle along the
#   y-axis. The default is 0.
#z_offset: 17.872292
#   This is a loose default. In fluidd or main sail its wise to raise the z offset 1 or 2mm on 
#   the first print to confirm offset was correct. A closer value can be obtained using calipers. 
#   Measure the tip of the probe to the tip of the nozzle to get this
#   (note do not trigger the probe get this with probe_calibrate).
speed: 10
#   Speed (in mm/s) of the Z axis when probing. The default is 5mm/s.
lift_speed: 50
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples. The default is to use the same value as the 'speed'
#   parameter.
sample_retract_dist: 2
#   The distance (in mm) to lift the toolhead between each sample (if
#   sampling more than once). The default is 2mm.
samples: 5
#   The number of times to probe each point. The probed z-values will
#   be averaged. The default is to probe 1 time.
samples_result: average
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
samples_tolerance: 0.02  # 0.05
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. If this tolerance is exceeded then either an error is
#   reported or the attempt is restarted (see
#   samples_tolerance_retries). The default is 0.100mm.
samples_tolerance_retries: 15 # 5
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. On a retry, all current samples are discarded
#   and the probe attempt is restarted. If a valid set of samples are
#   not obtained in the given number of retries then an error is
#   reported. The default is zero which causes an error to be reported
#   on the first sample that exceeds samples_tolerance
#activate_gcode:
#   A list of G-Code commands to execute prior to each probe attempt.
#   See docs/Command_Templates.md for G-Code format. This may be
#   useful if the probe needs to be activated in some way. Do not
#   issue any commands here that move the toolhead (eg, G1). The
#   default is to not run any special G-Code commands on activation.
#deactivate_gcode:
#   A list of G-Code commands to execute after each probe attempt
#   completes. See docs/Command_Templates.md for G-Code format. Do not
#   issue any commands here that move the toolhead. The default is to
#   not run any special G-Code commands on deactivation.


########################################
# Servos
########################################

# source: https://github.com/FHeilmann/klipper_config/blob/master/klipper_configs/klicky.cfg
#[servo probe_servo]
#pin: P2.0
#maximum_servo_angle: 180
#minimum_pulse_width: 0.001
#maximum_pulse_width: 0.0025


########################################
# Configs
########################################

[include config/*.cfg]

########################################
# Fluidd / Mainsail
########################################

[include webclient.cfg]

########################################
# Macro's
########################################

[include macros/*.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [endstop_phase stepper_a]
#*# trigger_phase = 130/512
#*#
#*# [endstop_phase stepper_b]
#*# trigger_phase = 88/512
#*#
#*# [endstop_phase stepper_c]
#*# trigger_phase = 126/512
#*#
#*# [probe]
#*# z_offset = 17.570
#*#
#*# [printer]
#*# delta_radius = 151.209444
#*#
#*# [stepper_a]
#*# angle = 209.820341
#*# arm_length = 315.000000
#*# position_endstop = 336.206722
#*#
#*# [stepper_b]
#*# angle = 329.766352
#*# arm_length = 315.000000
#*# position_endstop = 335.724033
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 315.000000
#*# position_endstop = 336.591559
#*#
#*# [delta_calibrate]
#*# height0 = 17.57
#*# height0_pos = 203922.800,203922.800,203922.800
#*# height1 = 17.57
#*# height1_pos = 252259.400,252259.400,179973.800
#*# height2 = 17.57
#*# height2_pos = 199866.200,280025.200,199866.200
#*# height3 = 17.57
#*# height3_pos = 180565.400,243826.000,243826.000
#*# height4 = 17.57
#*# height4_pos = 197573.600,197573.600,254423.600
#*# height5 = 17.57
#*# height5_pos = 236401.000,181562.400,236401.000
#*# height6 = 17.57
#*# height6_pos = 266277.800,198593.400,198593.400
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608, 0.181608
#*# 	0.102806, 0.102806, 0.102806, 0.135608, 0.133862, 0.119444, 0.063488, -0.028116, -0.108633, -0.108633, -0.108633
#*# 	-0.049137, -0.049137, 0.025930, 0.057883, 0.055330, 0.043184, 0.010834, -0.050080, -0.099112, -0.145162, -0.145162
#*# 	-0.049517, -0.049517, -0.009756, 0.008509, 0.017652, 0.024948, 0.003851, -0.043393, -0.074420, -0.100414, -0.100414
#*# 	-0.072533, -0.072533, -0.043093, -0.035256, -0.018650, -0.011886, -0.017875, -0.037223, -0.033187, -0.031340, -0.031340
#*# 	-0.075180, -0.051549, -0.026183, -0.016208, -0.017285, -0.006991, -0.013432, -0.016182, -0.012400, 0.012766, 0.012943
#*# 	-0.008615, -0.008615, -0.004502, 0.003819, -0.028143, -0.011629, -0.002647, 0.018036, 0.034203, 0.056873, 0.056873
#*# 	0.045796, 0.045796, 0.040678, 0.034865, 0.014088, -0.009965, 0.011128, 0.033426, 0.056466, 0.079413, 0.079413
#*# 	0.098907, 0.098907, 0.073934, 0.049659, 0.030215, -0.004509, 0.010612, 0.017125, 0.034479, 0.083525, 0.083525
#*# 	0.102872, 0.102872, 0.102872, 0.053516, 0.017748, 0.014975, -0.021106, -0.017863, -0.009994, -0.009994, -0.009994
#*# 	-0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376, -0.064376
#*# tension = 0.2
#*# min_x = -125.00019
#*# algo = bicubic
#*# y_count = 11
#*# mesh_y_pps = 2
#*# min_y = -125.000168
#*# x_count = 11
#*# max_y = 124.999832
#*# mesh_x_pps = 2
#*# max_x = 124.99981
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 55.804
#*# pid_ki = 1.033
#*# pid_kd = 753.353
#*#
#*# [bed_mesh bed_mesh_60]
#*# version = 1
#*# points =
#*# 	0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920, 0.226920
#*# 	0.162181, 0.162181, 0.162181, 0.195296, 0.198550, 0.184444, 0.125988, 0.021259, -0.054571, -0.054571, -0.054571
#*# 	-0.003849, -0.003849, 0.076867, 0.120383, 0.129080, 0.114122, 0.079584, 0.020545, -0.042862, -0.080162, -0.080162
#*# 	0.008920, 0.008920, 0.057431, 0.081009, 0.093902, 0.091823, 0.078851, 0.027545, -0.011295, -0.033851, -0.033851
#*# 	-0.006908, -0.006908, 0.028469, 0.036932, 0.067600, 0.072177, 0.057037, 0.038715, 0.034938, 0.026160, 0.026160
#*# 	-0.024243, 0.012201, 0.040067, 0.070980, 0.068028, 0.076759, 0.068755, 0.069443, 0.065100, 0.076203, 0.073255
#*# 	0.061697, 0.061697, 0.079248, 0.088194, 0.063420, 0.079621, 0.073551, 0.089911, 0.101390, 0.103748, 0.103748
#*# 	0.120796, 0.120796, 0.107865, 0.108302, 0.104401, 0.077473, 0.084878, 0.109239, 0.117091, 0.131601, 0.131601
#*# 	0.151407, 0.151407, 0.146746, 0.126221, 0.092402, 0.076741, 0.084362, 0.076812, 0.088229, 0.121337, 0.121337
#*# 	0.155372, 0.155372, 0.155372, 0.114766, 0.081811, 0.070288, 0.039206, 0.044324, 0.036569, 0.036569, 0.036569
#*# 	-0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626, -0.015626
#*# tension = 0.2
#*# mesh_x_pps = 2
#*# algo = bicubic
#*# min_x = -125.00019
#*# min_y = -125.000168
#*# y_count = 11
#*# mesh_y_pps = 2
#*# x_count = 11
#*# max_x = 124.99981
#*# max_y = 124.999832
#*#
#*# [bed_mesh bed_mesh_65]
#*# version = 1
#*# points =
#*# 	  0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920, 0.236920
#*# 	  0.175306, 0.175306, 0.175306, 0.209046, 0.217300, 0.201319, 0.141613, 0.035634, -0.044258, -0.044258, -0.044258
#*# 	  0.008026, 0.008026, 0.092805, 0.139758, 0.152830, 0.135997, 0.099896, 0.037733, -0.030050, -0.069537, -0.069537
#*# 	  0.019545, 0.019545, 0.073369, 0.098509, 0.115360, 0.114323, 0.095101, 0.047545, 0.008080, -0.020414, -0.020414
#*# 	  0.009342, 0.009342, 0.047844, 0.055369, 0.091038, 0.092489, 0.075475, 0.058090, 0.047751, 0.036160, 0.036160
#*# 	  -0.011743, 0.026889, 0.054755, 0.089730, 0.088653, 0.093947, 0.087505, 0.088193, 0.080100, 0.090266, 0.080130
#*# 	  0.074822, 0.074822, 0.097373, 0.108194, 0.086857, 0.099309, 0.088239, 0.107411, 0.118578, 0.114373, 0.114373
#*# 	  0.136733, 0.136733, 0.122865, 0.127052, 0.122526, 0.100598, 0.103315, 0.126114, 0.131153, 0.143163, 0.143163
#*# 	  0.162657, 0.162657, 0.163309, 0.142471, 0.107402, 0.093928, 0.099049, 0.090562, 0.097916, 0.127587, 0.127587
#*# 	  0.164122, 0.164122, 0.164122, 0.126016, 0.095873, 0.081538, 0.052019, 0.059637, 0.046881, 0.046881, 0.046881
#*# 	  -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376, -0.004376
#*# tension = 0.2
#*# min_x = -125.00019
#*# algo = bicubic
#*# y_count = 11
#*# mesh_y_pps = 2
#*# min_y = -125.000168
#*# x_count = 11
#*# max_y = 124.999832
#*# mesh_x_pps = 2
#*# max_x = 124.99981
