# !!! WORK IN PROGRESS !!!
# Adapted from: https://github.com/redoz/FLSUN-SR-Klipper-Config/blob/main/printer.cfg
# This macro will perform series of moves in couple of passes to help you calibrate end stops
[gcode_macro EXTENDED_ENDSTOP_PHASE_CALIBRATE]
description: Extended End Stop Calibration routine.
gcode:
	# Get user know that macro is executing
	{printer.gcode.action_respond_info("--=| EXTENDED END-STOP CALIBRATION |=--")}

    # Setup defaults
    {% set feed_rate = 7800 %}
    {% set initial_z = 200 %}             			# set initial Z height
    {% set z_step = 50 %}                 			# set Z change per pass
    {% set xy_step = 25 %}                			# set horizontal change per pass
    {% set num_passes = 3 %}              			# set how many passes to perform
    {% set max_print_radius = 0.0 %}              	# set default delta radius limit
    {% set bed_size_x = 100 %}              		# set max X limit for square bed
    {% set bed_size_y = 100 %}              		# set max Y limit for square bed
    {% set max_z = 100 %}              				# set max Z limit
    
	# Look up config
	{% set kinematics = printer.config_file.settings.printer.kinematics %}
	
	# Precompute maximum travel offset for delta (or round bed printers)
	{% if kinematics == "delta" %}					# get value from config
		{% set max_print_radius = printer.config_file.settings.printer.print_radius|float - 3 %}
		# Calculate maximum coordinate @45 degrees from center
		{% set max_delta_offset = (sin(45) * max_print_radius)|int %}
	{% endif %}

    SAVE_GCODE_STATE NAME=EXTENDED_ENDSTOP_PHASE_CALIBRATE_STATE
    G28 X Y Z                              			# home
    G90                                   			# absolute movement
    ENDSTOP_PHASE_CALIBRATE               			# call to klipper built in macro to initiate process
													# (universal for all kinematics)
    
    {% for pass in range(num_passes) %}
		{% set z = initial_z - loop.index0 * z_step %}
		{% if z < 25 %}								# check if we are too close 
			{% set z = 25 %}						# prevent crash with probe attached
		{% endif %}
		
		{% set offset = xy_step + loop.index0 * xy_step %}

		# If we are on round bed printer, limit offset to precalculated value
		{% if kinematics == "delta" %}
			# Check if point is outside of circle
			# See: https://math.stackexchange.com/questions/198764/how-to-know-if-a-point-is-inside-a-circle
			{% if sqrt((offset|float**2) * 2) >= max_print_radius %}
				{% set offset = max_delta_offset %}
			{% endif %}
		{% endif %}

		{% if kinematics == "delta" %}					# only valid for round delta beds !!!
			G1 Z{z} F{feed_rate}
			G1 X{offset} Y{offset} F{feed_rate}
			G28                                   		# home
			G1 Z{z} F{feed_rate}
			G1 X-{offset} Y{offset} F{feed_rate}
			G28                                   		# home
			G1 Z{z} F{feed_rate}
			G1 X{offset} Y-{offset} F{feed_rate}
			G28                                   		# home
			G1 Z{z} F{feed_rate}
			G1 X-{offset} Y-{offset} F{feed_rate}
			G28                                   		# home
		{% else %}
		{% endif %}
    {% endfor %}
      
	{% if kinematics == "delta" %}
		ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_a
		ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_b
		ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_c
	{% else %}
	    ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_x
    	ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_y
    	ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z
	{% endif %}
    
    G28                                   			# home
    
    RESTORE_GCODE_STATE NAME=EXTENDED_ENDSTOP_PHASE_CALIBRATE_STATE MOVE=0
    